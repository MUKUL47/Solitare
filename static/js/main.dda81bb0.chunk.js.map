{"version":3,"sources":["deck/deck.jsx","solitare.js","gameboard/gameboard.jsx","index.js"],"names":["Deck","props","state","refs","data","map","React","createRef","index","e","includes","this","type","helpDeckClicked","deckClicked","slice","deckIndex","setState","prev","card","onClick","ref","rank","hidden","suit","backcolor","backtext","style","cursor","zIndex","position","left","top","width","Component","Solitare","someoneWon","ranks","board","deck","deckExposed","aces","finishedDeck","cardConsidered","cardsConsidered","colorMap","spades","clubs","diamonds","hearts","ranking","ace","jack","queen","king","i","j","getRandomCardFromDeck","push","newCard","pop","cards","exception","column","length","console","error","finishIndex","boardIndex","spliceIndex","isDeckExposed","splice","reverse","v","ranksIdx","Math","floor","random","typeIdx","id","Gameboard","solitare","initialize","selectedDeckInfo","gameboardRef","deckInHandRef","reset","preventDefault","oldDeck","appendNewCardsToBoard","resetCardInHard","exposeTopDeck","removeCardsFromDeck","removeOldCardsFromBoard","deckToDeckExpose","document","addEventListener","current","clientY","clientX","resetDeck","appendToFinishedDeck","className","onEmptyDeckBoard","bind","deckIdx","lastDeckClicked","onDeckClick","App","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.dda81bb0.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nexport class Deck extends Component {\n  /**\n   * 1) render a deck in a domino pattern based on hidden property\n   * 2) on drag event to parent, verify if card(s) are/is draggable\n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      refs: props?.data?.map(() => React.createRef()),\n      index: -1,\n    };\n  }\n  deckClicked(index, e) {\n    //, \"DECK_EXP_OSED\"\n    if ([\"DECK\"].includes(this.props.type)) {\n      this.helpDeckClicked(index);\n      return;\n    }\n    this.props.deckClicked(\n      this.props.data.slice(index),\n      index,\n      this.props.type,\n      e,\n      this.props.deckIndex\n    );\n  }\n\n  helpDeckClicked(index) {\n    this.props.deckClicked(this.props.data[index], index, this.props.type);\n    this.setState({ index });\n    if (index === this.state.index) {\n      this.setState({ index: -1 });\n      return;\n    }\n  }\n  componentDidUpdate(prev) {\n    const prevCards = prev?.data;\n    const nextCards = this.props?.data;\n    if (prevCards !== nextCards) {\n      this.setState({\n        refs: this.props?.data?.map(() => React.createRef()),\n        index: -1,\n      });\n    }\n    // return true;\n  }\n  render() {\n    const Data = this.props.data.map((card, index) => {\n      return (\n        <card-t\n          onClick={(e) => this.deckClicked(index, e)}\n          key={index}\n          ref={this.state.refs[index]}\n          rank={card.hidden ? 0 : card.rank}\n          suit={card.hidden ? 0 : card.type}\n          backcolor=\"blue\"\n          backtext=\" \"\n          style={{\n            cursor: \"pointer\",\n            zIndex: index,\n            position: \"absolute\",\n            left: 0,\n            top: index * (this?.props?.zIndex || 35),\n            width: \"100%\",\n          }}></card-t>\n      );\n    });\n    return Data;\n  }\n}\n","export class Solitare {\n  ranks = [\"ace\", 2, 3, 4, 5, 6, 7, 8, 9, 10, \"jack\", \"queen\", \"king\"];\n  type = [\"spades\", \"clubs\", \"diamonds\", \"hearts\"];\n  board = []; // [ ]\n  deck = [];\n  deckExposed = [];\n  aces = [];\n  finishedDeck = [[], [], [], []];\n  //\n  cardConsidered = [];\n  cardsConsidered = 1;\n  colorMap = { spades: 0, clubs: 0, diamonds: 1, hearts: 1 };\n  ranking = {\n    ace: 1,\n    2: 2,\n    3: 3,\n    4: 4,\n    5: 5,\n    6: 6,\n    7: 7,\n    8: 8,\n    9: 9,\n    10: 10,\n    jack: 11,\n    queen: 12,\n    king: 13,\n  };\n  constructor(someoneWon) {\n    this.someoneWon = someoneWon;\n    return this;\n  }\n\n  initialize() {\n    for (let i = 0; i <= 6; i++) {\n      for (let j = 0; j <= i; j++) {\n        let card = this.getRandomCardFromDeck();\n        card[\"hidden\"] = i !== j;\n        if (!this.board[i]) {\n          this.board[i] = [card];\n        } else {\n          this.board[i].push(card);\n        }\n      }\n    }\n    let card = this.getRandomCardFromDeck();\n    while (card) {\n      card[\"hidden\"] = true;\n      this.deck.push(card);\n      card = this.getRandomCardFromDeck();\n    }\n    return this;\n  }\n\n  deckToDeckExpose(deck) {\n    const newCard = deck ? deck : { ...this.deck.pop(), hidden: false };\n    this.deckExposed = [...this.deckExposed, newCard];\n    return this;\n  }\n\n  appendNewCardsToBoard(index, cards, exception) {\n    const column = this.board[index];\n    //first card king\n    if (!exception) {\n      if (column.length === 0 && cards[0].rank !== \"king\") return false;\n      //red-black vice-versa\n      if (\n        this.colorMap[column[column.length - 1]?.type] ===\n        this.colorMap[cards?.[0].type]\n      )\n        return false;\n      //ranking\n      if (\n        column.length > 0 &&\n        this.ranking?.[column[column.length - 1].rank] - 1 !==\n          this.ranking?.[cards?.[0]?.rank]\n      )\n        return false;\n    }\n    this.board[index] = [...this.board[index], ...cards];\n    return this;\n  }\n\n  exposeTopDeck(index) {\n    try {\n      this.board[index][this.board[index].length - 1].hidden = false;\n      return this;\n    } catch (e) {\n      console.error(e);\n      return this;\n    }\n  }\n\n  appendToFinishedDeck(card, finishIndex) {\n    //rank, type\n    let deck = this.finishedDeck[finishIndex];\n    if (deck.length === 0 && card.rank !== \"ace\") return false;\n    if (deck.length > 0) {\n      if (\n        deck[0].type !== card.type ||\n        this.ranking[deck[deck.length - 1].rank] + 1 !== this.ranking[card.rank]\n      )\n        return false;\n    }\n    this.finishedDeck[finishIndex] = [...this.finishedDeck[finishIndex], card];\n    return this;\n  }\n\n  removeOldCardsFromBoard(boardIndex, spliceIndex, isDeckExposed) {\n    this.board[boardIndex].splice(spliceIndex);\n    return this;\n  }\n  removeCardsFromDeck() {\n    this.deckExposed.pop();\n    return this;\n  }\n\n  resetDeck() {\n    this.deck = this.deckExposed.reverse().map((v) => {\n      return { ...v, hidden: true };\n    });\n    this.deckExposed = [];\n    return this;\n  }\n\n  reset() {}\n\n  getRandomCardFromDeck() {\n    while (this.cardsConsidered < 53) {\n      const ranksIdx = Math.floor(Math.random() * 13);\n      const typeIdx = Math.floor(Math.random() * 4);\n      const index = `${ranksIdx}-${typeIdx}`;\n      if (!this.cardConsidered[index]) {\n        this.cardConsidered[index] = true;\n        this.cardsConsidered++;\n        return {\n          type: this.type[typeIdx],\n          rank: this.ranks[ranksIdx],\n          id: Math.random(),\n        };\n      }\n    }\n    return false;\n  }\n}\n","import React from \"react\";\nimport { Deck } from \"../deck/deck\";\nimport { Solitare } from \"../solitare\";\nimport \"./gameboard.css\";\nexport class Gameboard extends React.Component {\n  constructor(props) {\n    super(props);\n    const solitare = new Solitare();\n    solitare.initialize();\n    this.state = {\n      solitare,\n      selectedDeckInfo: { deck: null, type: -1, index: -1, top: -1, left: -1 },\n    };\n    this.gameboardRef = React.createRef();\n    this.deckInHandRef = React.createRef();\n  }\n\n  componentDidUpdate(prev) {\n    if (prev.reset !== this.props.reset) {\n      this.setState({\n        solitare: new Solitare().initialize(),\n        selectedDeckInfo: {},\n      });\n    }\n  }\n\n  deckClicked(cards, index, type, e, deckIndex) {\n    // //console.log(cards, index, type);\n    e?.preventDefault();\n    if (type === \"DECK\" && !this.state.selectedDeckInfo?.deck) {\n      this.setState({ solitare: this.state.solitare.deckToDeckExpose() });\n    } else if (!this.state.selectedDeckInfo?.deck) {\n      //hold deck in hand\n      if (cards[0].hidden) return;\n      if (type === \"DECK_EXPOSED\") {\n        this.setState({\n          selectedDeckInfo: { deck: cards, index, type, e, deckIndex },\n          solitare: this.state.solitare.removeCardsFromDeck(),\n        });\n      } else {\n        this.setState({\n          selectedDeckInfo: { deck: cards, index, type, e, deckIndex },\n          solitare: this.state.solitare.removeOldCardsFromBoard(\n            deckIndex,\n            index\n          ),\n        });\n      }\n    } else {\n      // target deck\n      if (type === \"BOARD\") {\n        //console.log(deckIndex);\n        const oldDeck = { ...this.state.selectedDeckInfo };\n        const solitare = this.state.solitare.appendNewCardsToBoard(\n          deckIndex,\n          oldDeck.deck,\n          oldDeck.deckIndex === deckIndex\n        );\n        if (!solitare) {\n          this.resetCardInHard();\n          return;\n        }\n        this.setState({\n          solitare: solitare.exposeTopDeck(oldDeck.deckIndex),\n          selectedDeckInfo: {},\n        });\n      }\n    }\n  }\n\n  onDeckClick() {\n    if (\n      this.state.selectedDeckInfo?.deck &&\n      this.state.selectedDeckInfo?.type === \"DECK_EXPOSED\"\n    ) {\n      this.setState({\n        solitare: this.state.solitare.deckToDeckExpose(\n          this.state.selectedDeckInfo?.deck[0]\n        ),\n        selectedDeckInfo: {},\n      });\n    }\n  }\n\n  onEmptyDeckBoard(index) {\n    if (this.state.selectedDeckInfo?.deck) {\n      const oldDeck = { ...this.state.selectedDeckInfo };\n      const solitare = this.state.solitare.appendNewCardsToBoard(\n        index,\n        oldDeck.deck,\n        oldDeck.deckIndex === index\n      );\n      if (!solitare) {\n        this.resetCardInHard();\n        return;\n      }\n      this.setState({\n        solitare: solitare.exposeTopDeck(oldDeck.deckIndex),\n        selectedDeckInfo: {},\n      });\n    }\n  }\n\n  resetCardInHard() {\n    // if (e.which === 2) {\n    if (this.state.selectedDeckInfo?.deck) {\n      const oldDeck = { ...this.state.selectedDeckInfo };\n      if (this.state.selectedDeckInfo.type === \"BOARD\") {\n        const solitare = this.state.solitare.appendNewCardsToBoard(\n          oldDeck.deckIndex,\n          oldDeck.deck,\n          true\n        );\n        if (!solitare) return;\n        this.setState({\n          solitare: solitare,\n          selectedDeckInfo: {},\n        });\n      } else {\n        //from deck\n        this.setState({\n          solitare: this.state.solitare.deckToDeckExpose(oldDeck.deck[0]),\n          selectedDeckInfo: {},\n        });\n      }\n    }\n    // }\n  }\n\n  componentDidMount() {\n    document.addEventListener(\"mousemove\", (e) => {\n      if (this.deckInHandRef.current) {\n        this.deckInHandRef.current.style.top = `${e.clientY}px`;\n        this.deckInHandRef.current.style.left = `${e.clientX + 10}px`;\n      }\n    });\n  }\n\n  resetDeck() {\n    if (this.state.solitare.deck.length === 0)\n      this.setState({ solitare: this.state.solitare.resetDeck() });\n  }\n\n  lastDeckClicked(cards, index, type, e, deckIndex) {\n    if (this.state.selectedDeckInfo?.deck?.length === 1) {\n      const oldDeck = { ...this.state.selectedDeckInfo };\n      const solitare = this.state.solitare.appendToFinishedDeck(\n        oldDeck.deck[oldDeck.deck.length - 1],\n        deckIndex\n      );\n      if (!solitare) {\n        this.resetCardInHard();\n        return;\n      }\n      this.setState({\n        solitare: solitare.exposeTopDeck(oldDeck.deckIndex),\n        selectedDeckInfo: {},\n      });\n    }\n  }\n\n  render() {\n    const board = this.state.solitare.board.map((deck, deckIndex) => {\n      return (\n        <div\n          className=\"board-area\"\n          key={deck.id}\n          onClick={() => {\n            if (deck.length === 0) {\n              this.onEmptyDeckBoard(deckIndex);\n            }\n          }}>\n          <Deck\n            data={deck}\n            deckIndex={deckIndex}\n            deckClicked={this.deckClicked.bind(this)}\n            type=\"BOARD\"\n          />\n        </div>\n      );\n    });\n    const finishedDeck = this.state.solitare.finishedDeck.map(\n      (deck, deckIdx) => {\n        return (\n          <div className=\"ace\" key={deckIdx}>\n            {deck.length > 0 ? (\n              <Deck\n                key={deckIdx}\n                data={deck}\n                deckClicked={this.lastDeckClicked.bind(this)}\n                zIndex={1.5}\n                type=\"DECK_FINISHED\"\n                deckIndex={deckIdx}\n              />\n            ) : (\n              <p\n                onClick={() =>\n                  this.lastDeckClicked(null, null, null, null, deckIdx)\n                }>\n                Ace\n              </p>\n            )}\n          </div>\n        );\n      }\n    );\n    return (\n      <div className=\"game-board\" data={1}>\n        {this.state.selectedDeckInfo.deck && (\n          <div className=\"deck-in-hand\" ref={this.deckInHandRef}>\n            <Deck\n              data={this.state.selectedDeckInfo.deck}\n              deckClicked={() => null}\n            />\n          </div>\n        )}\n        <div className=\"game-board_header\">\n          <div className=\"deck-stash\">\n            <div className=\"decks\">\n              {this.state.solitare.deck.length > 0 ? (\n                <Deck\n                  data={this.state.solitare.deck}\n                  deckClicked={this.deckClicked.bind(this)}\n                  zIndex={1.5}\n                  type=\"DECK\"\n                />\n              ) : (\n                <p onClick={this.resetDeck.bind(this)}>Reset Deck</p>\n              )}\n            </div>\n            <div\n              className=\"decks-exposed\"\n              onClick={this.onDeckClick.bind(this)}>\n              <Deck\n                data={this.state.solitare.deckExposed}\n                deckClicked={this.deckClicked.bind(this)}\n                zIndex={1.5}\n                type=\"DECK_EXPOSED\"\n              />\n            </div>\n          </div>\n          <div className=\"aces\">{finishedDeck}</div>\n        </div>\n        <div className=\"game-board_play\">{board}</div>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { Gameboard } from \"./gameboard/gameboard\";\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { reset: 0 };\n  }\n\n  render() {\n    return (\n      <>\n        <div className=\"solitare-header\">\n          <div>\n            <h1>Solitare</h1>\n            <button onClick={() => this.setState({ reset: Math.random() })}>\n              Reset\n            </button>\n          </div>\n          {/* <div className=\"solitare-score\">score</div> */}\n        </div>\n        <Gameboard reset={this.state.reset} />\n      </>\n    );\n  }\n}\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}